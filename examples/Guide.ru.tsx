import React from 'react';
import { Sofa, Stack, Text, Accordion, AccordionItem, AccordionTrigger, AccordionContent, Markdown } from '../src/components';

const modules = [
    {
        id: 'part-1',
        title: 'Часть 1: Frontend-фреймворки и библиотеки',
        content: `
### React, Vue, Angular

Это "большая тройка" современных frontend-фреймворков. Они позволяют создавать сложные, интерактивные пользовательские интерфейсы на основе компонентного подхода.

- **React:** Библиотека от Facebook. Самая популярная, с огромной экосистемой. Гибкая, так как отвечает только за UI (view layer).
- **Vue:** Прогрессивный фреймворк. Считается более простым для входа, чем React или Angular. Отличная документация.
- **Angular:** Полноценный фреймворк от Google. Строгий, структурированный (использует TypeScript), предоставляет множество инструментов "из коробки".

### jQuery

Когда-то стандарт для манипуляции DOM и обработки событий. Сегодня его популярность снизилась, так как современные фреймворки предлагают более декларативные и эффективные способы работы с UI. Однако он все еще встречается в старых проектах.
        `,
    },
    {
        id: 'part-2',
        title: 'Часть 2: Backend (Node.js) и базы данных',
        content: `
### Express

Минималистичный и гибкий веб-фреймворк для Node.js. Де-факто стандарт для создания REST API и серверов. Позволяет быстро настраивать маршрутизацию, обработку запросов и middleware.

\`\`\`javascript
const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res.send('Hello World!');
});

app.listen(3000);
\`\`\`

### ORM и работа с базами данных

- **Mongoose:** ODM (Object Data Modeling) для работы с MongoDB (NoSQL база данных) в Node.js. Позволяет определять схемы данных и предоставляет удобный API для запросов.
- **Sequelize:** Мощная ORM (Object-Relational Mapping) для работы с реляционными базами данных (PostgreSQL, MySQL, SQLite) в Node.js.
- **Драйверы:** \`pg\` (для PostgreSQL) и \`mysql2\` (для MySQL) — это низкоуровневые библиотеки для прямого взаимодействия с базами данных.

### Redis

In-memory хранилище данных, используемое как база данных, кэш или брокер сообщений. Очень быстрое, идеально для задач, требующих высокой производительности (сессии, кэширование).
        `,
    },
    {
        id: 'part-3',
        title: 'Часть 3: Сборка и разработка',
        content: `
### Сборщики модулей (Bundlers)

Современные приложения состоят из множества файлов (модулей). Сборщики объединяют их в один или несколько файлов, понятных браузеру.

- **Webpack:** Самый мощный и настраиваемый сборщик. Может обрабатывать не только JS, но и CSS, изображения и многое другое через систему "загрузчиков" (loaders).
- **Vite:** Современный и очень быстрый инструмент, который использует нативные ES-модули браузера во время разработки, что значительно ускоряет запуск и обновление.
- **Parcel:** Сборщик с минимальной конфигурацией ("zero-configuration"). Отличный выбор для быстрых прототипов.

### Транспиляторы и линтеры

- **Babel:** Транспилятор, который преобразует современный JavaScript (ES6+) и JSX в код, понятный старым браузерам.
- **ESLint:** Линтер, который анализирует код на предмет потенциальных ошибок и следования стилю кода.
- **Prettier:** "Форматтер" кода. Автоматически переформатирует ваш код в соответствии с единым стилем.

### Инструменты для разработки

- **nodemon:** Утилита, которая автоматически перезапускает ваш Node.js-сервер при изменении файлов.
- **pm2:** Продвинутый менеджер процессов для Node.js. Позволяет запускать приложения в фоновом режиме, управлять кластерами и мониторить их.
        `,
    },
    {
        id: 'part-4',
        title: 'Часть 4: Управление состоянием и запросы',
        content: `
### Управление состоянием (State Management)

В больших приложениях управление состоянием может стать сложной задачей.

- **Redux:** Самая известная библиотека для предсказуемого управления состоянием. Использует единое "хранилище" (store) для всего состояния приложения. Часто используется с React через библиотеку \`react-redux\`.

### HTTP-клиенты

- **Axios:** Популярный HTTP-клиент для браузера и Node.js. Позволяет легко делать GET, POST и другие запросы, поддерживает промисы, перехват запросов и ответов.

\`\`\`javascript
axios.get('https://api.example.com/users')
  .then(response => {
    console.log(response.data);
  });
\`\`\`
        `,
    },
    {
        id: 'part-5',
        title: 'Часть 5: Тестирование',
        content: `
### Фреймворки для тестирования

- **Jest:** Популярный фреймворк для тестирования JavaScript от Facebook. Включает в себя все необходимое: "runner" для запуска тестов, библиотеку для утверждений (assertions) и инструменты для моков (mocks).
- **Mocha:** Гибкий фреймворк, который предоставляет только "runner". Для утверждений и моков нужно подключать другие библиотеки.

### Библиотеки для утверждений (Assertion Libraries)

- **Chai:** Популярная библиотека утверждений, часто используется в паре с Mocha. Позволяет писать тесты в BDD/TDD стиле (\`expect(foo).to.be.a('string')\`).

### End-to-End (E2E) тестирование

- **Cypress:** Современный инструмент для E2E-тестирования, который запускает тесты прямо в браузере. Позволяет видеть выполнение тестов в реальном времени.
- **Puppeteer / Selenium:** Библиотеки для автоматизации браузера. Позволяют писать скрипты, которые управляют браузером для выполнения тестов.

### Другие инструменты

- **Supertest:** Библиотека для тестирования HTTP-серверов, часто используется с Express.
        `,
    },
    {
        id: 'part-6',
        title: 'Часть 6: UI-библиотеки и стилизация',
        content: `
### Компонентные библиотеки

Готовые наборы UI-компонентов, которые ускоряют разработку.

- **Material-UI (MUI):** Реализация Material Design от Google для React. Очень популярна.
- **Bootstrap:** Один из старейших и самых известных CSS-фреймворков. Есть интеграции для React (\`react-bootstrap\`) и Vue (\`bootstrap-vue\`).

### Стилизация

- **Sass:** CSS-препроцессор, который добавляет в CSS переменные, вложенность, миксины и другие возможности.
- **Styled Components:** Библиотека CSS-in-JS. Позволяет писать CSS-код прямо в ваших JavaScript-компонентах, обеспечивая настоящую инкапсуляцию стилей.

\`\`\`jsx
// Пример Styled Components
const Title = styled.h1\`
  font-size: 1.5em;
  text-align: center;
  color: palevioletred;
\`;

<Title>Hello World</Title>
\`\`\`
        `,
    },
];

export const GuideRu = () => (
    <Sofa>
        <Stack gap="1.5rem">
            <Text as="h2" size="1.5rem" weight="600">Справочник по npm-пакетам</Text>
            <Text>Обзор популярных библиотек и фреймворков в экосистеме JavaScript.</Text>
            <Accordion defaultValue="part-1">
                {modules.map(module => (
                    <AccordionItem key={module.id} value={module.id}>
                        <AccordionTrigger>{module.title}</AccordionTrigger>
                        <AccordionContent>
                            <Markdown>{module.content}</Markdown>
                        </AccordionContent>
                    </AccordionItem>
                ))}
            </Accordion>
        </Stack>
    </Sofa>
);
